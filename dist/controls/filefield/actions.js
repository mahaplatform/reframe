'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var setReady = exports.setReady = function setReady() {
  return {
    type: 'SET_READY'
  };
};

var loadFiles = exports.loadFiles = function loadFiles(endpoint, token, $ids) {
  return {
    type: 'API_REQUEST',
    method: 'GET',
    endpoint: endpoint,
    query: { $ids: $ids },
    token: token,
    request: 'LOAD_FILES_REQUEST',
    success: 'LOAD_FILES_SUCCESS',
    failure: 'LOAD_FILES_FAILURE'
  };
};

var cache = exports.cache = function cache(endpoint) {
  return {
    type: 'API_REQUEST',
    method: 'GET',
    endpoint: endpoint
  };
};

var addFile = exports.addFile = function addFile(uniqueIdentifier, fileName, fileSize, contentType, totalChunks) {
  return {
    type: 'ADD_FILE',
    uniqueIdentifier: uniqueIdentifier,
    fileName: fileName,
    fileSize: fileSize,
    contentType: contentType,
    totalChunks: totalChunks
  };
};

var uploadBegin = exports.uploadBegin = function uploadBegin() {
  return {
    type: 'UPLOAD_BEGIN'
  };
};

var uploadProgress = exports.uploadProgress = function uploadProgress(uniqueIdentifier, progress) {
  return {
    type: 'UPLOAD_PROGRESS',
    uniqueIdentifier: uniqueIdentifier,
    progress: progress
  };
};

var uploadSuccess = exports.uploadSuccess = function uploadSuccess(uniqueIdentifier, response) {
  return {
    type: 'UPLOAD_SUCCESS',
    uniqueIdentifier: uniqueIdentifier,
    asset: response.data
  };
};

var uploadFailure = exports.uploadFailure = function uploadFailure() {
  return {
    type: 'UPLOAD_FAILURE'
  };
};

var removeFile = exports.removeFile = function removeFile(index) {
  return {
    type: 'REMOVE_FILE',
    index: index
  };
};

var uploadComplete = exports.uploadComplete = function uploadComplete() {
  return {
    type: 'UPLOAD_COMPLETE'
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsic2V0UmVhZHkiLCJ0eXBlIiwibG9hZEZpbGVzIiwiZW5kcG9pbnQiLCJ0b2tlbiIsIiRpZHMiLCJtZXRob2QiLCJxdWVyeSIsInJlcXVlc3QiLCJzdWNjZXNzIiwiZmFpbHVyZSIsImNhY2hlIiwiYWRkRmlsZSIsInVuaXF1ZUlkZW50aWZpZXIiLCJmaWxlTmFtZSIsImZpbGVTaXplIiwiY29udGVudFR5cGUiLCJ0b3RhbENodW5rcyIsInVwbG9hZEJlZ2luIiwidXBsb2FkUHJvZ3Jlc3MiLCJwcm9ncmVzcyIsInVwbG9hZFN1Y2Nlc3MiLCJyZXNwb25zZSIsImFzc2V0IiwiZGF0YSIsInVwbG9hZEZhaWx1cmUiLCJyZW1vdmVGaWxlIiwiaW5kZXgiLCJ1cGxvYWRDb21wbGV0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxJQUFNQSw4QkFBVyxTQUFYQSxRQUFXO0FBQUEsU0FBTztBQUM3QkMsVUFBTTtBQUR1QixHQUFQO0FBQUEsQ0FBakI7O0FBSUEsSUFBTUMsZ0NBQVksU0FBWkEsU0FBWSxDQUFDQyxRQUFELEVBQVdDLEtBQVgsRUFBa0JDLElBQWxCO0FBQUEsU0FBNEI7QUFDbkRKLFVBQU0sYUFENkM7QUFFbkRLLFlBQVEsS0FGMkM7QUFHbkRILHNCQUhtRDtBQUluREksV0FBTyxFQUFFRixVQUFGLEVBSjRDO0FBS25ERCxnQkFMbUQ7QUFNbkRJLGFBQVMsb0JBTjBDO0FBT25EQyxhQUFTLG9CQVAwQztBQVFuREMsYUFBUztBQVIwQyxHQUE1QjtBQUFBLENBQWxCOztBQVdBLElBQU1DLHdCQUFRLFNBQVJBLEtBQVEsQ0FBQ1IsUUFBRDtBQUFBLFNBQWU7QUFDbENGLFVBQU0sYUFENEI7QUFFbENLLFlBQVEsS0FGMEI7QUFHbENIO0FBSGtDLEdBQWY7QUFBQSxDQUFkOztBQU1BLElBQU1TLDRCQUFVLFNBQVZBLE9BQVUsQ0FBQ0MsZ0JBQUQsRUFBbUJDLFFBQW5CLEVBQTZCQyxRQUE3QixFQUF1Q0MsV0FBdkMsRUFBb0RDLFdBQXBEO0FBQUEsU0FBcUU7QUFDMUZoQixVQUFNLFVBRG9GO0FBRTFGWSxzQ0FGMEY7QUFHMUZDLHNCQUgwRjtBQUkxRkMsc0JBSjBGO0FBSzFGQyw0QkFMMEY7QUFNMUZDO0FBTjBGLEdBQXJFO0FBQUEsQ0FBaEI7O0FBU0EsSUFBTUMsb0NBQWMsU0FBZEEsV0FBYztBQUFBLFNBQU87QUFDaENqQixVQUFNO0FBRDBCLEdBQVA7QUFBQSxDQUFwQjs7QUFJQSxJQUFNa0IsMENBQWlCLFNBQWpCQSxjQUFpQixDQUFDTixnQkFBRCxFQUFtQk8sUUFBbkI7QUFBQSxTQUFpQztBQUM3RG5CLFVBQU0saUJBRHVEO0FBRTdEWSxzQ0FGNkQ7QUFHN0RPO0FBSDZELEdBQWpDO0FBQUEsQ0FBdkI7O0FBTUEsSUFBTUMsd0NBQWdCLFNBQWhCQSxhQUFnQixDQUFDUixnQkFBRCxFQUFtQlMsUUFBbkI7QUFBQSxTQUFpQztBQUM1RHJCLFVBQU0sZ0JBRHNEO0FBRTVEWSxzQ0FGNEQ7QUFHNURVLFdBQU9ELFNBQVNFO0FBSDRDLEdBQWpDO0FBQUEsQ0FBdEI7O0FBTUEsSUFBTUMsd0NBQWdCLFNBQWhCQSxhQUFnQjtBQUFBLFNBQU87QUFDbEN4QixVQUFNO0FBRDRCLEdBQVA7QUFBQSxDQUF0Qjs7QUFJQSxJQUFNeUIsa0NBQWEsU0FBYkEsVUFBYSxDQUFDQyxLQUFEO0FBQUEsU0FBWTtBQUNwQzFCLFVBQU0sYUFEOEI7QUFFcEMwQjtBQUZvQyxHQUFaO0FBQUEsQ0FBbkI7O0FBS0EsSUFBTUMsMENBQWlCLFNBQWpCQSxjQUFpQjtBQUFBLFNBQU87QUFDbkMzQixVQUFNO0FBRDZCLEdBQVA7QUFBQSxDQUF2QiIsImZpbGUiOiJ1bmtub3duIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHNldFJlYWR5ID0gKCkgPT4gKHtcbiAgdHlwZTogJ1NFVF9SRUFEWSdcbn0pXG5cbmV4cG9ydCBjb25zdCBsb2FkRmlsZXMgPSAoZW5kcG9pbnQsIHRva2VuLCAkaWRzKSA9PiAoe1xuICB0eXBlOiAnQVBJX1JFUVVFU1QnLFxuICBtZXRob2Q6ICdHRVQnLFxuICBlbmRwb2ludCxcbiAgcXVlcnk6IHsgJGlkcyB9LFxuICB0b2tlbixcbiAgcmVxdWVzdDogJ0xPQURfRklMRVNfUkVRVUVTVCcsXG4gIHN1Y2Nlc3M6ICdMT0FEX0ZJTEVTX1NVQ0NFU1MnLFxuICBmYWlsdXJlOiAnTE9BRF9GSUxFU19GQUlMVVJFJ1xufSlcblxuZXhwb3J0IGNvbnN0IGNhY2hlID0gKGVuZHBvaW50KSA9PiAoe1xuICB0eXBlOiAnQVBJX1JFUVVFU1QnLFxuICBtZXRob2Q6ICdHRVQnLFxuICBlbmRwb2ludFxufSlcblxuZXhwb3J0IGNvbnN0IGFkZEZpbGUgPSAodW5pcXVlSWRlbnRpZmllciwgZmlsZU5hbWUsIGZpbGVTaXplLCBjb250ZW50VHlwZSwgdG90YWxDaHVua3MpID0+ICh7XG4gIHR5cGU6ICdBRERfRklMRScsXG4gIHVuaXF1ZUlkZW50aWZpZXIsXG4gIGZpbGVOYW1lLFxuICBmaWxlU2l6ZSxcbiAgY29udGVudFR5cGUsXG4gIHRvdGFsQ2h1bmtzXG59KVxuXG5leHBvcnQgY29uc3QgdXBsb2FkQmVnaW4gPSAoKSA9PiAoe1xuICB0eXBlOiAnVVBMT0FEX0JFR0lOJ1xufSlcblxuZXhwb3J0IGNvbnN0IHVwbG9hZFByb2dyZXNzID0gKHVuaXF1ZUlkZW50aWZpZXIsIHByb2dyZXNzKSA9PiAoe1xuICB0eXBlOiAnVVBMT0FEX1BST0dSRVNTJyxcbiAgdW5pcXVlSWRlbnRpZmllcixcbiAgcHJvZ3Jlc3Ncbn0pXG5cbmV4cG9ydCBjb25zdCB1cGxvYWRTdWNjZXNzID0gKHVuaXF1ZUlkZW50aWZpZXIsIHJlc3BvbnNlKSA9PiAoe1xuICB0eXBlOiAnVVBMT0FEX1NVQ0NFU1MnLFxuICB1bmlxdWVJZGVudGlmaWVyLFxuICBhc3NldDogcmVzcG9uc2UuZGF0YVxufSlcblxuZXhwb3J0IGNvbnN0IHVwbG9hZEZhaWx1cmUgPSAoKSA9PiAoe1xuICB0eXBlOiAnVVBMT0FEX0ZBSUxVUkUnXG59KVxuXG5leHBvcnQgY29uc3QgcmVtb3ZlRmlsZSA9IChpbmRleCkgPT4gKHtcbiAgdHlwZTogJ1JFTU9WRV9GSUxFJyxcbiAgaW5kZXhcbn0pXG5cbmV4cG9ydCBjb25zdCB1cGxvYWRDb21wbGV0ZSA9ICgpID0+ICh7XG4gIHR5cGU6ICdVUExPQURfQ09NUExFVEUnXG59KVxuIl19