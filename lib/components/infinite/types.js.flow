// @flow

import type {Component} from "../../types";
export type Action = {type: "FETCH_DELAY"} | {type: "FETCH_TIMEOUT"};
export type FetchDelay = {type: "FETCH_DELAY"};
export type FetchFailure = {type: "FETCH_FAILURE"};
export type FetchRequest = {request_id: string, type: "FETCH_REQUEST"};
export type FetchSuccess = {result: {data: Array<Object>, meta: Object, pagination: Object}, type: "FETCH_SUCCESS"};
export type FetchTimeout = {type: "FETCH_TIMEOUT"};
export type Filter = Object;
export type Page = {skip: ?number};
export type Props = {all?: number, cacheKey?: string, delayed?: any, empty?: any, endpoint: string, failure?: any, filter?: Object, footer?: any, header?: any, layout?: any, loading?: any, notFound?: any, onFetch?: (endpoint: string, query: {$filter: ?Object, $page: ?{skip: ?number}, $sort: string}) => void, onFetchDelay?: () => void, onFetchTimeout?: () => void, records?: Array<Object>, request_id?: string, sort?: {key: string, order: "asc" | "desc"}, status?: string, timeout?: any, total?: number};
export type Query = {$filter: ?Object, $page: ?{skip: ?number}, $sort: string};
export type Sort = {key: string, order: "asc" | "desc"};
export type State = {+all: ?number, +records: ?Array<Object>, +request_id: ?string, +status: "pending" | "loading" | "failed" | "delayed" | "timeout" | "completed" | "loaded", +total: ?number};
export type Status = "pending" | "loading" | "failed" | "delayed" | "timeout" | "completed" | "loaded";

declare module.exports: {};