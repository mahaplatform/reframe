// @flow

import {Delayed, Empty, Failure, Loading, Loader, NotFound, Timeout} from "./results";
import Scrollpane from "../scrollpane";
import _ from "lodash";
import React from "react";
import type {Props as ScrollpaneProps} from "../scrollpane/types";
import type {Props} from "./types";
import type {Component, Node} from "../../types";
declare export default class extends React$Component<{all?: number, cacheKey?: string, delayed?: any, empty?: any, endpoint: string, exclude_ids?: Array<number>, failure?: any, filter?: Object, footer?: any, header?: any, layout?: any, loading?: any, notFound?: any, onFetch?: (endpoint: string, query: {$filter: ?Object, $page: ?{skip: ?number}, $sort: string}) => void, onFetchDelay?: () => void, onFetchTimeout?: () => void, onSelect?: (id: number) => void, onSelectAll?: () => void, onUpdateSelected?: (ids: Array<Object>) => void, records?: Array<Object>, request_id?: string, selected?: Array<number>, sort?: {key: string, order: "asc" | "desc"}, status?: string, timeout?: any, total?: number}, void> {
  static defaultProps: {cacheKey: null, delayed: () => any, empty: () => any, failure: () => any, filter: {}, footer: null, header: null, loading: () => any, notFound: () => any, onUpdateSelected: (ids: any) => void, sort: {key: null, order: null}, timeout: () => any};

  timeout: any;
  _getComponent(component: any): any;
  _getScrollpane(): {onReachBottom: () => void};
  _handleDelay(): void;
  _handleFetch(skip?: ?number): void;
  _handleRefresh(): void;
  _handleTimeout(): void;
  componentDidMount(): void;
  componentDidUpdate(prevProps: {all?: number, cacheKey?: string, delayed?: any, empty?: any, endpoint: string, exclude_ids?: Array<number>, failure?: any, filter?: Object, footer?: any, header?: any, layout?: any, loading?: any, notFound?: any, onFetch?: (endpoint: string, query: {$filter: ?Object, $page: ?{skip: ?number}, $sort: string}) => void, onFetchDelay?: () => void, onFetchTimeout?: () => void, onSelect?: (id: number) => void, onSelectAll?: () => void, onUpdateSelected?: (ids: Array<Object>) => void, records?: Array<Object>, request_id?: string, selected?: Array<number>, sort?: {key: string, order: "asc" | "desc"}, status?: string, timeout?: any, total?: number}): void;
  render(): any;
  shouldComponentUpdate(nextProps: any, nextState: any): boolean;
}
