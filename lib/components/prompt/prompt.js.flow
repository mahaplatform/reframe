// @flow

import React from "react";
import Task from "../task";
import PropTypes from "prop-types";
import {CSSTransition} from "react-transition-group";
import type {Props, ChildContext, PromptChildContext, ConfirmChildContext} from "./types";
declare export default class extends React$Component<{cancel: boolean, children: any, message: string, onClear: () => void, onClose: () => void, onOpen: (message: string, options: Array<Object>) => void, open: boolean, options: Array<{className?: string, drawer: any, handler: () => void, icon?: string, label: string, location: "left" | "right", mobile?: boolean, modal: any, onDone: () => void, onRequest: (itemRequest: {body: any, endpoint: string, method: any, onFailure: any, onSuccess: any, params: any}) => any, request: {body: any, endpoint: string, method: any, onFailure: any, onSuccess: any, params: any}, route: string}>}, void> {
  static childContextTypes: any;
  static contextTypes: any;
  static defaultProps: {cancel: boolean};

  _getConfirmChildContext(): {confirm: {close: () => void, open: (message: string, yes: () => void, no: () => void) => void}};
  _getPromptChildContext(): {prompt: {close: () => void, open: (message: string, options: Array<Object>) => void}};
  _handleClose(): void;
  componentDidUpdate(prevProps: {cancel: boolean, children: any, message: string, onClear: () => void, onClose: () => void, onOpen: (message: string, options: Array<Object>) => void, open: boolean, options: Array<{className?: string, drawer: any, handler: () => void, icon?: string, label: string, location: "left" | "right", mobile?: boolean, modal: any, onDone: () => void, onRequest: (itemRequest: {body: any, endpoint: string, method: any, onFailure: any, onSuccess: any, params: any}) => any, request: {body: any, endpoint: string, method: any, onFailure: any, onSuccess: any, params: any}, route: string}>}): void;
  getChildContext(): mixed /* UNEXPECTED TYPE: EvalT */;
  render(): [any, $Exact<{+key: string | number | null, +props: mixed /* UNEXPECTED TYPE: EvalT */, +ref: any, +type: ElementType}>, $Exact<{+key: string | number | null, +props: mixed /* UNEXPECTED TYPE: EvalT */, +ref: any, +type: ElementType}>];
}
