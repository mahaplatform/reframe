// @flow

import type {Filters} from "../../components/filters/types";
import type {Component} from "../../types";
export type Action = {chosen: Array<Object>, type: "SET_CHOSEN"} | {filter: Object, type: "SET_FILTER"} | {query: string, type: "SET_QUERY"} | {type: "TOGGLE_FILTER"} | {record: Object, type: "TOGGLE_RECORD"};
export type Chosen = Array<Object>;
export type Filter = Object;
export type LoadSuccess = {result: {data: Array<Object>, meta: Object, pagination: Object}, type: "LOAD_SUCCESS"};
export type Props = {chosen?: Array<Object>, defaultValue: Array<Object>, endpoint: string, filter?: Object, filtering?: boolean, filters: Array<Object>, format: any, onChange?: (value: Array<Object>) => void, onLoad?: (endpoint: string, query: Object) => void, onReady?: () => void, onSetChosen?: (chosen: Array<Object>) => void, onSetFilter?: (value: Object) => void, onSetQuery?: (query: string) => void, onToggleFilter?: () => void, onToggleRecord?: (id: number) => void, query?: string, sort?: string, text?: string, value?: string};
export type Query = string;
export type Record = Object;
export type SetChosen = {chosen: Array<Object>, type: "SET_CHOSEN"};
export type SetFilter = {filter: Object, type: "SET_FILTER"};
export type SetQuery = {query: string, type: "SET_QUERY"};
export type State = {+chosen: Array<Object>, +filter: Object, +filtering: boolean, +query: string};
export type ToggleFilter = {type: "TOGGLE_FILTER"};
export type ToggleRecord = {record: Object, type: "TOGGLE_RECORD"};

declare module.exports: {};